<?php

require_once dirname(__FILE__).'/../../../../Amfphp/Plugins/AmfphpAuthentication/AmfphpAuthentication.php';
require_once dirname(__FILE__) . '/../../../../Amfphp/ClassLoader.php';
require_once dirname(__FILE__) . "/../../../TestData/Services/AuthenticationService.php";

/**
 * Test class for AmfphpAuthentication.
 * Generated by PHPUnit on 2011-01-17 at 15:13:05.
 */
class AmfphpAuthenticationTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var AmfphpAuthentication
     */
    protected $object;

    /**
     *
     * @var <AuthenticationService>
     */
    protected $serviceObj;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new AmfphpAuthentication;
        $this->serviceObj = new AuthenticationService();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        session_unset();
    }

    public function testAddRole()
    {
        AmfphpAuthentication::addRole("admin");
        $roles = $_SESSION[AmfphpAuthentication::SESSION_FIELD_ROLES];
        $this->assertEquals(array("admin"), $roles);
    }

    public function testClearSessionInfo()
    {
        AmfphpAuthentication::addRole("bla");
        AmfphpAuthentication::clearSessionInfo();
        $this->assertFalse(isset ($_SESSION[AmfphpAuthentication::SESSION_FIELD_ROLES]));
    }


    public function testLoginAndAccess(){
        $this->serviceObj->login("admin", "adminPassword");
        $this->object->serviceObjectCreatedHook($this->serviceObj, "adminMethod");
    }

    public function testNormalAccessToUnprotectedMethods(){
        $this->object->serviceObjectCreatedHook($this->serviceObj, "logout");

    }

    /**
     * @expectedException Amfphp_Core_Exception
     */
    public function testLogout(){
        $this->serviceObj->login("admin", "adminPassword");
        $this->object->serviceObjectCreatedHook($this->serviceObj, "adminMethod");
        $this->serviceObj->logout();
        $this->object->serviceObjectCreatedHook($this->serviceObj, "adminMethod");
    }
    /**
     * @expectedException Amfphp_Core_Exception
     */
    public function testAccessWithoutAuthentication()
    {
        $this->object->serviceObjectCreatedHook($this->serviceObj, "adminMethod");
    }

    /**
     * @expectedException Amfphp_Core_Exception
     */
    public function testBadRole(){
        $this->serviceObj->login("user", "userPassword");
        $this->object->serviceObjectCreatedHook($this->serviceObj, "adminMethod");

    }
    
    public function testGetAmfRequestHeaderHandlerHook()
    {
        $credentialsAssoc = new stdClass();
        $userIdField = Amfphp_Core_Amf_Constants::CREDENTIALS_FIELD_USERID;
        $passwordField = Amfphp_Core_Amf_Constants::CREDENTIALS_FIELD_PASSWORD;
        $credentialsAssoc->$userIdField =  "admin";
        $credentialsAssoc->$passwordField = "adminPassword";
        $credentialsHeader = new Amfphp_Core_Amf_Header(Amfphp_Core_Amf_Constants::CREDENTIALS_HEADER_NAME, true, $credentialsAssoc);
        $ret = $this->object->getAmfRequestHeaderHandlerHook(null, $credentialsHeader);
        $this->assertEquals($this->object, $ret);
        
        $otherHeader = new Amfphp_Core_Amf_Header("bla");
        $ret = $this->object->getAmfRequestHeaderHandlerHook(null, $otherHeader);
        $this->assertEquals(null, $ret);
    }

    /**
     * @expectedException Amfphp_Core_Exception
     */
    public function testWithHooksBlockAccess(){
        Amfphp_Core_HookManager::getInstance()->callHooks(Amfphp_Core_Common_ServiceRouter::HOOK_SERVICE_OBJECT_CREATED, $this->serviceObj, "adminMethod");
    }

    public function testWithHooksGrantAccess(){
        $credentialsAssoc = new stdClass();
        $userIdField = Amfphp_Core_Amf_Constants::CREDENTIALS_FIELD_USERID;
        $passwordField = Amfphp_Core_Amf_Constants::CREDENTIALS_FIELD_PASSWORD;
        $credentialsAssoc->$userIdField =  "admin";
        $credentialsAssoc->$passwordField = "adminPassword";
        $credentialsHeader = new Amfphp_Core_Amf_Header(Amfphp_Core_Amf_Constants::CREDENTIALS_HEADER_NAME, true, $credentialsAssoc);
        $hookManager = Amfphp_Core_HookManager::getInstance();
        $ret = $hookManager->callHooks(Amfphp_Core_Amf_Handler::HOOK_GET_AMF_REQUEST_HEADER_HANDLER, null, $credentialsHeader);
        $ret->handleRequestHeader($credentialsHeader);
        $ret->serviceObjectCreatedHook($this->serviceObj, "adminMethod");
    }


}
?>
