<?php

require_once dirname(__FILE__) . '/../../../../amfphp/core/amf/AMFUtil.php';

/**
 * Test class for AMFUtil.
 * Generated by PHPUnit on 2011-01-20 at 15:43:40.
 */
class AMFUtilTest extends PHPUnit_Framework_TestCase {

    /**
     * @var AMFUtil
     */
    protected $object;
    /**
     * for testApplyFunc
     * @var int
     */
    private $counter;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new AMFUtil;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    public function testIsSystemBigEndian() {
        $isBigEndian = AMFUtil::isSystemBigEndian();
        $this->assertTrue(($isBigEndian == false) || ($isBigEndian == true));
    }

    public function testGetRawPostData() {
        $this->assertTrue(AMFUtil::getRawPostData() == null);
    }

    public function testApplyFunc($obj = null){
        $this->counter++;
        return $obj;
    }

    public function testApplyFunctionToContainedObjects() {
        //simple
        $testObj1 = array();
        $testObj1[] = new stdClass();
        $this->counter = 0;
        AMFUtil::applyFunctionToContainedObjects($testObj1, array($this, "testApplyFunc"), 0, 10);
        $this->assertEquals(2, $this->counter);

        //a bit more complicated
        $testObj2 = new stdClass();
        $subObj = array(new stdClass(), new stdClass(), array(1, 2, false), null);
        $testObj2->data = $subObj;
        $testObj2->bla = 'bla';
        $this->counter = 0;
        AMFUtil::applyFunctionToContainedObjects($testObj2, array($this, "testApplyFunc"), 0, 10);
        $this->assertEquals(10, $this->counter);

    }

}

?>
